@{
    
    Layout = null;
}
@model Braille.TestRunner.Controllers.IndexViewModel

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <meta http-equiv="X-UA-Compatible" content="IE=Edge;chrome=1" />
    <title>Index</title>
    <style>
        * {
            font-family: Helvetica, Arial, 'DejaVu Sans', 'Liberation Sans', Freesans, sans-serif;
            font-size: 10pt;
        }
    </style>
    <script src="~/Scripts/jquery-2.1.0.js"></script>
    <script src="~/Scripts/knockout-3.1.0.debug.js"></script>
    <script src="~/Scripts/rx.js"></script>
    <script src="~/Scripts/rx.jquery.js"></script>
    <script>
        var data = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model)))
            ;;
    </script>
</head>
<body>
    <button data-bind="click: runAll">Run all</button>

    <table data-bind="foreach: items">
        <tr>
            <td style="width: 20px; height: 1.5em;">
                <div data-bind="style: { display: testRunning() ? 'inline-block' : 'none' }">
                    <img src="/Images/throbber.gif" alt="Working..." />
                </div>
            </td>
            <td>
                <a data-bind="attr: { href: '/Test/Run?name=/' + JsUrl }, text: Name"></a>
            </td>
            <td>
                <span style="color: green" data-bind="style: { display: testHasSucceeded() ? 'inline-block' : 'none' }">OK</span>
                <span style="color: red" data-bind="style: { display: testHasFailed() ? 'inline-block' : 'none' }">FAILED</span>
            </td>
        </tr>
        <tr>
            <td colspan="3"><pre data-bind="foreach: errors"><!-- ko text: $data --><!-- /ko --><br /></pre></td>
        </tr>
    </table>
    
    <script>
        function createItem(e) { 
            e.testHasSucceeded = ko.observable(false);
            e.testHasFailed = ko.observable(false);
            e.testRunning = ko.observable(false);
            e.errors = ko.observable([]);
            return e;
        }

        ko.applyBindings({
            items: data.Items.map(createItem),
            runAll: function() {
                
                Rx.Observable
                    .fromArray(this.items)
                    .select(
                        function (item) {
                            return Rx.Observable
                                .defer(
                                    function() {
                                        item.testRunning(true);
                                        return $
                                            .getJSONAsObservable("/api/testrunner?name=" + item.Name)
                                            .do(
                                                function (result) { 
                                                    if (result.data.TestSuccess)
                                                        item.testHasSucceeded(true);
                                                    else
                                                    {
                                                        item.testHasFailed(true);
                                                        item.errors(result.data.Errors);
                                                    }

                                                    item.testRunning(false); 
                                                });
                                    });
                        })
                    .concatAll()
                    .subscribe();
            }
        });
    </script>
</body>
</html>
